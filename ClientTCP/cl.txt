#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <string.h>
#include <ctype.h>
#include "ValidareComanda.h"

#define COM_N " Comanda necunoscuta."
#define DELIMIT_CAUTA "$"
extern int errno;
int port;
/*
char tipComanda(char comanda[1024])
{
    char tip= 'n';
    if(strcmp(comanda,"login") == 0)
        return tip = 'l';
    if(strcmp(comanda,"cauta") == 0)
        return tip = 'c';
    if(strcmp(comanda,"descarca") == 0)
        return tip = 'd';
    if(strcmp(comanda,"review") == 0)
        return tip = 'r';
    if(strcmp(comanda,"recomanda") == 0)
        return tip = 'p';
    if(strcmp(comanda,"adauga_carte") == 0)
        return tip = 'a';
    if(strcmp(comanda,"sterge_carte") == 0)
        return tip = 's';
    if(strcmp(comanda,"adauga_user") == 0)
        return tip = 'u';
    if(strcmp(comanda,"istoric") == 0)
        return tip = 'h';
    if(strcmp(comanda,"logout") == 0)
        return tip = 'x';
    if(strcmp(comanda,"exit") == 0)
        return tip = 't';
    return tip = 'n';
}

bool validareTip(char comanda[1024])
{
    char *t = strtok(comanda," ");
    if(t == NULL)
        return false;
    char c[1024];
    strcpy(c,t);
    t = strtok(NULL," ");
    if(t != NULL)
        return false;
    strcpy(comanda,c);
    return true;
}

bool trimSpatiu(char comanda[1024])
{
    int i =0;
    char enter[3];
    enter[0] ='\n';
    enter[1] = '\0';
    if(strcmp(comanda,enter) == 0)
    {
        strcpy(comanda,"ALL");
        return true;
    }
    while(strlen(comanda)>0 && i < strlen(comanda) && comanda[i] == ' ')
    {
        i++;
    }
    strcpy(comanda,(comanda)+i);
    if(strcmp(comanda,"") == 0)
        return false;
    if(comanda[strlen(comanda)-1] == '\n')
        comanda[strlen(comanda)-1] = '\0';
    i = strlen(comanda) - 1;
    while(i>0 && comanda[i] == ' ')
        i--;
    comanda[i+1] = '\0';
    if(strcmp(comanda,"") == 0)
        return false;
    return true;
}

bool isNumber(char comanda[1024])
{
    int i;
    for(i = 0; i < strlen(comanda); ++i)
        if(!isdigit(comanda[i]))
            return false;
    return true;
}

bool desparteVirgula(char comanda[1024])
{
    int i = 0;
    char enter[3], rez[100], *a, aux[100];
    enter[0] ='\n';
    enter[1] = '\0';
    rez[0] = '\0';
    if(strcmp(comanda,enter) == 0)
    {
        strcpy(comanda,"ALL");
        return true;
    }
    comanda[strlen(comanda)-1] = '\0';
    a = strtok(comanda,",");
    while(a != NULL)
    {
        strcpy(aux,a);
        trimSpatiu(aux);
        if(strlen(aux)>0)
        {
            strcat(rez,aux);
            strcat(rez,",");
        }
        a = strtok(NULL,",");
    }
    rez[strlen(rez)-1] = '\0';
    strcpy(comanda,rez);
    return true;
}*/

int main(int argc, char *argv[])
{
    if(argc != 3)
    {
        printf("executati <adresa_server> <port> \n");
        return -1;
    }
    
    int sd;
    struct sockaddr_in server;
    port = atoi(argv[2]);

    if ((sd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
    {
      perror ("Eroare la socket().\n");
      return errno;
    }

    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(argv[1]);
    server.sin_port = htons(port);

    /*if (connect (sd, (struct sockaddr *) &server,sizeof (struct sockaddr)) == -1)
    {
      perror ("[client]Eroare la connect().\n");
      return errno;
    }*/

    printf("Bun venit in aplicatie!\n");
    fflush(stdout);

    bool exit = 0;
    char comanda[1024], aux[100];
    char *mesaj = new char[1024];
    char *raspuns = new char[3000];
    char tip;
    long lungime;
    while(!exit)
    {
        printf("Introduceti numele comenzii.\n");
        fflush(stdout);
        if(fgets(comanda,1024,stdin) == NULL)
        {
            printf("Eroare la citirea comenzii.\n");
            fflush(stdout);
            return -1;
        }
        comanda[strlen(comanda)-1]='\0';
        if(validareTip(comanda) == false)
        {
            printf("%s,\n",COM_N);
            continue;
        }
        tip = tipComanda(comanda);
        printf("%c\n",tipComanda(comanda));
        if(tip == 'n')
        {
            printf("%s,\n",COM_N);
            continue;
        }
        if(tip == 't')
        {
            //anunta serverul
            break;
        }
        switch(tip)
        {
            case 'l':
                /*strcpy(aux,"- -");
                while(validareTip(aux) == false)
                {
                    printf("    Introdu numele de utilizator.(numele userului nu contine spatii)\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcpy(mesaj,aux);
                strcat(mesaj," ");
                strcpy(aux,"- -");
                while(validareTip(aux) == false)
                {
                    printf("    Introdu parola.(parola nu contine spatii)\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcat(mesaj,aux);*/
                if(vLogin(mesaj) == -1)
                    return -1;
                break;
            case 'c':
                /*strcpy(aux,"- -");
                while(validareTip(aux) == false)
                {
                    printf("    Introdu ISBN.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    char enter[3];
                    enter[0] ='\n';
                    enter[1] = '\0';
                    if(strcmp(enter,aux) == 0)
                    {
                        strcpy(aux,"ALL");
                        break;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcpy(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);
                printf("    Introdu titlul sau 'ALL'/ENTER pentru toate titlurile.\n");
                fflush(stdout);
                if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                trimSpatiu(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);
                printf("    Introdu autori despartiti prin virgula sau 'ALL'/ENTER pentru toti autorii.\n");
                fflush(stdout);
                if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                desparteVirgula(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);
                printf("    Introdu genurile despartite prin virgula sau 'ALL'/ENTER pentru toate.\n");
                fflush(stdout);
                if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                desparteVirgula(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);
                printf("    Introdu subgenurile despartite prin virgula sau 'ALL'/ENTER pentru toate.\n");
                fflush(stdout);
                if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                desparteVirgula(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);
                
                strcpy(aux,"a");
                while(!isNumber(aux))
                {
                    printf("    Introduceti anul aparitiei sau 'ALL'/ENTER pentru toti anii.\n");
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                    char enter[3];
                    enter[0] ='\n';
                    enter[1] = '\0';
                    if(strcmp(enter,aux) == 0)
                    {
                        strcpy(aux,"ALL");
                        break;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);
                strcpy(aux,"a");
                while(!isNumber(aux))
                {
                    printf("    Introduceti ratingul sau 'ALL'/ENTER.\n");
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                    char enter[3];
                    enter[0] ='\n';
                    enter[1] = '\0';
                    if(strcmp(enter,aux) == 0)
                    {
                        strcpy(aux,"ALL");
                        break;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcat(mesaj,aux);*/
                vCautaCarte(mesaj);
                break;
            case 'a':
                /*strcpy(aux,"- -");
                while(validareTip(aux) == false)
                {
                    printf("    Introdu ISBN.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcpy(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);

                char enter[3];
                enter[0] ='\n';
                enter[1] = '\0';
                strcpy(aux,enter);
                while(strcmp(aux,enter) == 0)
                {
                    printf("    Introdu titlul.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                }
                trimSpatiu(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);

                strcpy(aux,"a");
                while(!isNumber(aux) || strcmp(aux,enter) == 0)
                {
                    printf("    Introduceti anul_aparitiei.\n");
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                    char enter[3];
                    enter[0] ='\n';
                    enter[1] = '\0';
                    if(strcmp(enter,aux) == 0)
                    {
                        strcpy(aux,"ALL");
                        break;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);

                strcpy(aux,enter);
                while(strcmp(aux,enter) == 0)
                {
                    printf("    Introdu autorii despartiti prin virgula.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                }
                desparteVirgula(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);

                strcpy(aux,enter);
                while(strcmp(aux,enter) == 0)
                {
                    printf("    Introdu id-ul autorilor despartit prin virgula.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                }
                desparteVirgula(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);

                strcpy(aux,enter);
                while(strcmp(aux,enter) == 0)
                {
                    printf("    Introdu genurile despartite prin virgula.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                }
                desparteVirgula(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);

                strcpy(aux,enter);
                while(strcmp(aux,enter) == 0)
                {
                    printf("    Introdu sungenurile despartite prin virgula.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                }
                desparteVirgula(aux);
                strcat(mesaj,aux);
                strcat(mesaj,DELIMIT_CAUTA);

                strcpy(aux,enter);
                while(strcmp(aux,enter) == 0)
                {
                    printf("    Introdu numele fisierului.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                        {
                            printf("Eroare la citirea comenzii.\n");
                            fflush(stdout);
                            return -1;
                        }
                }
                strcat(mesaj,aux);*/
                vAdaugaCarte(mesaj);
                break;
            case 's':
                /*strcpy(aux,"- -");
                while(validareTip(aux) == false || !isNumber(aux))
                {
                    printf("    Introdu ISBN.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcpy(mesaj,aux);*/
                vStergeCarte(mesaj);
                break;
            case 'u':
                /*strcpy(aux,"- -");
                while(validareTip(aux) == false)
                {
                    printf("    Introdu numele de utilizator.(numele userului nu contine spatii)\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcpy(mesaj,aux);
                strcat(mesaj," ");

                strcpy(aux,"- -");
                while(validareTip(aux) == false)
                {
                    printf("    Introdu parola.(parola nu contine spatii)\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcat(mesaj,aux);
                strcat(mesaj," ");

                strcpy(aux,"- -");
                while(validareTip(aux) == false || !isNumber(aux) || (aux[0] != '1' && aux[0] != '0'))
                {
                    printf("    Introdu 0-user normal 1-administrator.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcat(mesaj,aux);*/
                vAdaugaUser(mesaj);
                break;
            case 'r':
                /*strcpy(aux,"- -");
                while(validareTip(aux) == false || !isNumber(aux))
                {
                    printf("    Introdu ISBN.\n");
                    fflush(stdout);
                    if(fgets(aux,100,stdin) == NULL)
                    {
                        printf("Eroare la citirea comenzii.\n");
                        fflush(stdout);
                        return -1;
                    }
                    aux[strlen(aux)-1] = '\0';
                }
                strcpy(mesaj,aux);*/
                vVoteaza(mesaj);
                break;

            case 'p':
                strcpy(mesaj,"-");
                break;
            case 'h':
                strcpy(mesaj,"-");
                break;
            case 'x':
                strcpy(mesaj,"-");
                break;
            case 't':
                strcpy(mesaj,"-");
                break;
        }
        printf("%s",mesaj);
        //verifica tipul comenzii

        //if ok
            //case pt comanda->introducerea restului de parametrii
            //pregatirea mesajului
            // trimite lung, tip, mesaj
            // citeste lung, tip, raspuns
            //afiseaza raspuns
        //if exit
            //anunta serverul
            //inchide client
        //if false
            //afis comanda invalida, continue

    }
    return 0;
}
